<6장> const와 static
  
  1.클래스와 const
    
    1)const의 특징
    
      가)const 키워드는 변수읜 선언 앞에 붙어서 변수를 상수화한다.
        -상수화 할 때는 반드시 초기화를 같이해줘야한다.
      나)const 키워드는 포인터가 가리키는 데이터를 상수화한다.
      다)const 키워드는 포인터 선언 시 이름 앞에 붙어서 포인터 자체를 상수화한다.
  
    2)멤버변수의 상수화, 초기화
    
      멤버 변수에 const를 쓰면(멤버변수를 상수화) 쓰레기값으로 상수화되면서 초기화가 된다.
      이 때문에 멤버 이니셜라이져를 써서 const 하는 멤버 변수를 초기화한다.
  
      ex)Student(int _id) : id(_id)  <- 멤버변수 id가 있을 때 복생성자에서 id를 _id로 초기화 해준다는 뜻
      
      멤버 이니셜라이져의 특징 - 1. 생성자의 몸체부분보다 먼저 실행된다. 2.const 멤버 변수를 초기화 할 수 있다.
  
      이니셜라이져는 - 둘 이상의 const 멤버 변수를 ,를 이용해 구분지어 초기화 가능
                      일반 멤버 변수도 초기화 가능.
  
      3)const 멤버 함수
      
       -상수화된 함수의 특징 :  1.멤버 함수가 상수화 되면, 이 함수을 통해서 멤버 변수의 값이 변경되는 것은 허용되지 않는다.
                               2.상수화되지 않은 함수의 호출을 허용하지 않을 뿐만 아니라, ->해결: 함수를 상수화
                                3.멤버 변수의 포인터를 리턴하는 것도 허용하지 않는다. ->해결: 포인터가 가리키는 값을 상수화
                                  
      4)const 객체
      
        객체도 생성과 동시에 상수화 가능하다.
        -특징 : 멤버 변수의 조작 불가능, 상수화된 멤버 함수만 호출 가능
        
        컨셉은 const 멤버 함수와 비슷하다.
          
      5)const와 함수 오버로딩
      
        오버로딩의 조건에 "매개 변수의 타입 및 개수" 가 있었는데 여기에 "상수 함수이냐 아니냐"에 따라서도 오버로딩 성립
        
        클래스 내에 const 달린 함수와 안달린 함수를 모두 선언 및 정의 해주면 오버로딩을 통해 컴파일 에러가 안나게 할 수 있다. 
          
        상수화 된 함수와 되지 않은 함수 둘 중에는 되지 않은 함수가 더 우선순위가 높다.
        (둘 다 호출 가능한 상황에서는 상수화 되지 않은 함수를 호출)
          
      6)const 키워드는 한마디로 안정성에 기여한다.
          
  
  2.클래스와 static
      
    -전역변수가 필요할 때 static을 사용한다.
     
    -객체 내에 멤버 변수로 static 변수를 사용해서 그 객체에 종속성과 전역변수 효과를 동시에 낼 수 있다.
          
    -static 멤버의 특징
     1. main함수가 호출되기도 전에 메모리 공간에 올라가서 초기화된다. 따라서 public으로 선언이 된다면, 객체 생성 이전에도 접근이 가능하다.
     2. 객체의 멤버로 존재하는 것이 아니다. 다만 선언되어 있는 클래스 내에서 직접 접근할 수 있는 권한이 부여된 것이다.
      
    -static 멤버 초기화 : main 함수가 호출되기 전에 static 멤버 변수를 초기화 하는 방법
      main 함수 호출 전에 static 멤버 변수가 들어있는 객체의 이름::멤벼변수 = 값 이런 식으로 초기화 해준다.
      static이 public으로 선언되었을떄만 이런식의 메모리 참조가 가능하다. private면 외부 접근 불가능
    
   3.explicit & mutable
      
      1)explicit - 생성자 앞에 붙어서 묵시적 호출을 허용하지 않는다는 것을 나타냄
      
      2)mutable - 멤버 변수가 mutable로 선언 되면, 상수화된 멤버 함수도 데이터 변경이 가능
                  -> 어쩔 수 없는 상황에서만 사용하고 사용을 안하는게 좋다. 아니면 그냥 함수를 상수화하지 않는게 더 좋다.
